define(["parse/parse","nu/stream"],function(a){var g=Function.prototype.call.bind(Array.prototype.reduce),j=Function.prototype.call.bind(Array.prototype.reduceRight),c=RegExp.prototype.test,h=function(a,b){return a.valueOf()===b.valueOf()},d=function(e){return function(b,c){return new a.ExpectError(b,e,null===c?"end of input":c)}},i=function(e){return a.token(h.bind(void 0,e),d(e))},k=function(e,b,c,d){return a.next(a.token(h.bind(void 0,b),function(b,e){return new a.ExpectError(b,d,e)}),e)},l=function(a,
b){a[b]=a[b]||{};return a[b]},m=function(a,b){g(b,l,a)[""]=null;return a},n=function b(c,d){return a.choice.apply(void 0,Object.keys(c).sort().reverse().map(function(f){return 0===f.length?a.always(d):a.attempt(a.next(i(f),b(c[f],d+f)))}))},p=a.Parser("Any Character",a.token(c.bind(/^.$/),d("any character"))),q=a.Parser("Any Letter",a.token(c.bind(/^[a-z]$/i),d("any letter character"))),r=a.Parser("Any Whitespace",a.token(c.bind(/^\s$/i),d("any space character"))),c=a.Parser("Any Digit",a.token(c.bind(/^[0-9]$/i),
d("any digit character")));return{character:i,string:function(b){return j(b,k,a.always(b))},trie:function(b){return a.attempt(n(g(b,m,{}),""))},anyChar:p,letter:q,space:r,digit:c}});
