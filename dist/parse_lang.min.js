define(["nu/stream","parse/parse"],function(e,b){var i=b.always(e.end),f=b.optional.bind(void 0,e.end),g=function(a,c){return 0>=a?i:b.cons(c,g(a-1,c))},j=function(a,c){return 0>=a?i:f(b.cons(c,j(a-1,c)))},h=function(a,c){return b.bind(a,function(a){return b.next(c,b.always(a))})},k=function(a,c){return b.cons(c,b.many(b.next(a,c)))},l=function(a,c){return b.rec(function(d){return b.cons(c,f(b.next(a,f(d))))})},n=function(a,c){return b.bind(c,b.rec(function(d){return function(m){return b.optional(m,
b.bind(a,function(a){return b.bind(c,function(b){return d(a(m,b))})}))}}))},p=function(a,c){return b.rec(function(d){return b.bind(c,function(c){return b.optional(c,b.bind(a,function(a){return b.bind(d,function(d){return b.always(a(c,d))})}))})})};return{times:g,betweenTimes:function(a,c,d){if(c<a)throw new b.ParserError("between max < min");return b.append(g(a,d),j(c-a,d))},then:h,between:function(a,c,d){return b.next(a,b.then(d,c))},sepBy1:k,sepBy:function(a,c){return b.optional(e.end,k(a,c))},
sepEndBy1:l,sepEndBy:function(a,c){return b.either(l(a,c),b.next(b.optional(null,a),b.always(e.end)))},endBy1:function(a,c){return b.many1(h(c,a))},endBy:function(a,c){return b.many(h(c,a))},chainl1:n,chainl:function(a,c,d){return b.optional(c,n(a,d))},chainr1:p,chainr:function(a,c,d){return b.optional(c,p(a,d))}}});
