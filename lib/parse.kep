/**
 * @fileOverview Combinatorial Parsers for JavaScript.
 * 
 * Unless otherwise noted, parses do not support backtracking by default.
 */
package (
// Continuations
    Tail
    trampoline
    
// Errors
    ParserError
    
    ParseError
    MultipleError
    UnknownError
    UnexpectError
    ExpectError
    
// Objects
    ParserState
    Position
    
// Parser Definition
    Parser
    label
    late
    rec
    
    unparser
    
// Parsers
    always
    of
    never
    bind
    chain
    map
    ap
    
    extract
    getParserState
    setParserState
    modifyParserState
    
    getState
    setState
    modifyState
    
    getInput
    setInput
    
    getPosition
    setPosition
    
    fail
    attempt
    look
    lookahead
    
    next
    sequences
    sequencea
    sequence
    
    empty
    either
    concat
    choices
    choicea
    choice
    optional
    expected
    not
    
    eager
    binds
    cons
    append
    enumerations
    enumerationa
    enumeration
    many
    many1
    manyTill
    
    memo
    
    token
    anyToken
    eof
    
// Running
    exec
    
    parseState
    parseStream
    parse
    
    runState
    runStream
    run
    
    testState
    testStream
    test)
with
    import 'nu-stream::stream' stream#{
        NIL
        first
        isEmpty
        rest
        reduceRight
        foldr},
    import 'seshet' seshat
in {

var identity := \x -> x;

var args := \-args(...) -> args;

var constant := \x -> \ -> x;

var throwConstant := \err -> \ -> { throw err; };

var flip := \f -> \x y -> f(y, x);

/* Continuation
 ******************************************************************************/
Tail := function \p state m cok cerr eok eerr =self-> {
    self.p = p;
    self.state = state;
    self.m = m;
    self.cok = cok;
    self.cerr = cerr;
    self.eok = eok;
    self.eerr = eerr;
};

trampoline := \f -> {
    var value = f;
    while (value instanceof Tail)
        value = value.p(value.state, value.m, value.cok, value.cerr, value.eok, value.eerr);
    return value;
};

/* Memoization
 ******************************************************************************/
/**
 * Structure used for memoization of parser results.
 * 
 * The memoer uses the concept of a window, a lower bound position, to designate
 * reachable results in the stream. Memoized results for positions outside of the
 * window will be automatically pruned when possible.
 */
var Memoer := function \memoer frames =self-> {
    self.memoer = memoer;
    self.frames = frames;
};

/**
 * Empty Memoer.
 */
Memoer.empty = new Memoer(
    seshat.create(
        \x y -> x.compare(y),
        \x y -> (x.id === y.id && (x.state === y.state || (x.state && x.state.eq(y.state))))),
    NIL);

/**
 * Push a new window onto the stack.
 */
Memoer.pushWindow = \m lower ->
    new Memoer(
        m.memoer,
        stream.cons(lower, m.frames));

/**
 * Pop the top most window.
 * 
 * Prunes table when possible.
 */
Memoer.popWindow = \m#{frames} -> let
    r = rest frames
in
    new Memoer(
        ?isEmpty r
            :seshat.prune(m.memoer, first frames)
            :m.memoer,
        r);

/**
 * Prune the table to exclude everything before position.
 */
Memoer.prune = \m position ->
    ?isEmpty m.frames
        :new Memoer(
            seshat.prune(m.memoer, position),
            m.frames)
        :m;

/**
 * Lookup memoized result at `pos` for parser `id`.
 * 
 * Return null if none.
 */
Memoer.lookup = \m pos id ->
    seshat.lookup(m.memoer, pos, id);

/**
 * Update the memoization table to store `val` for result at `pos` from parser
 * `id`.
 */
Memoer.update = \m pos id val ->
    new Memoer(
        seshat.update(m.memoer, pos, id, val),
        m.frames);

/* Records
 ******************************************************************************/
// Position
////////////////////////////////////////
/**
 * Position in input.
 * 
 * Tracks current index in input.
 */
Position := function \i =self-> {
    self.index = i;
};

/**
 * Initial position in a stream.
 */
Position.initial = new Position 0;

Position.prototype.toString = \ =self-> '' + self.index;

/**
 * Advance the position based on the consumed character.
 * 
 * @param tok Token consumed.
 * @param rest Rest of stream.
 * 
 * @returns Position after `tok`.
 */
Position.prototype.increment = \_ _ =self-> new Position(self.index + 1);

/**
 * Compare two positions.
 * 
 * @returns Number less than, equal to, or greater than zero if this position is
 *   less than, equal to, or greater than 'pos'.
 */
Position.prototype.compare = \pos =self-> (self.index - pos.index);

// ParserState
////////////////////////////////////////
/**
 * State of a parser.
 * 
 * @param input Input to the parser.
 * @param position Current position of head of input.
 * @param [userState] User data threaded through parser.
 */
ParserState := function \input position userState =self-> {
    self.input = input;
    self.position = position;
    self.userState = userState;
};

/**
 * Compares two states for memoization.
 * 
 * This is a part of the seshat id lookup process so the correct position has
 * already been found when this is called.
 */
ParserState.prototype.eq = \other =self->
    (  other
    && self.input === other.input
    && self.userState === other.userState);

/**
 * Is the state's input empty?
 */
ParserState.prototype.isEmpty = \ =self-> isEmpty self.input;

/**
 * Get the first item of the input.
 */
ParserState.prototype.first = \ =self-> first self.input;

/**
 * Get next state object for a given consumed token.
 * 
 * @param tok Token consumed.
 * 
 * @returns New input state for next item in input.
 */
ParserState.prototype.next = \tok =self-> {
    if (!self._next) with
        r = rest self.input,
        s = new ParserState(
            r,
            self.position.increment(tok, r),
            self.userState)
    in {
        self._next = new Parser\_ m cok -> cok(tok, s, m);
    }
    return self._next;
};

/**
 * Create a new state with input.
 * 
 * @param input New input.
 */
ParserState.prototype.setInput = \input =self->
    new ParserState(
        input,
        self.position,
        self.userState);

/**
 * Create a new state with position.
 * 
 * @param position New position.
 */
ParserState.prototype.setPosition = \position =self->
    new ParserState(
        self.input,
        position,
        self.userState);

/**
 * Create a new state with userState.
 * 
 * @param userState New user state.
 */
ParserState.prototype.setUserState = \userState =self->
    new ParserState(
        self.input,
        self.position,
        userState);

/* Errors
 ******************************************************************************/
/**
 * @constructor
 * @implements {Error}
 * 
 * Base Error for an error with the parsers themselves.
 */
ParserError := function \msg =self-> {
    self.message = msg;
};
ParserError.prototype = new Error();
ParserError.prototype.constructor = ParserError;
ParserError.prototype.name = 'ParserError';

/**
 * @constructor
 * @implements {Error}
 * 
 * Base Error for an error encountered during parsing.
 * 
 * @param position Position of error.
 * @param [msg] Error message.
 */
ParseError := function \position msg =self->{
    self.position = position;
    self._msg = (msg || "");
};
ParseError.prototype = new Error();
ParseError.prototype.constructor = ParseError;
ParseError.prototype.name = 'ParseError';

ParseError.prototype.toString = \ =self-> self.message;

Object.defineProperties(ParseError.prototype, {
    message: {
        configurable: true,
        get: \ =self->
            "At " + self.position + " " + self.errorMessage
    },
    errorMessage: {
        configurable: true,
        get: \ =self-> self._msg
    }
});

/**
 * @constructor
 * @implements {ParseError}
 * Merges zero or more ParseErrors into a single ParseError.
 * 
 * @params position Position of errors.
 * @params [errors] Array like object containing zero or more ParseErrors.
 */
MultipleError := function \position errors =self-> {
    self.position = position;
    self.errors = (errors || []);
};
MultipleError.prototype = new ParseError();
MultipleError.prototype.constructor = MultipleError;
MultipleError.prototype.name = 'MultipleError';

Object.defineProperty(MultipleError.prototype, 'errorMessage', {
    get: \ =self->
        "[" + self.errors.map((.message)).join(", ") + "]"
});

/**
 * @constructor
 * @implements {MultipleError}
 * Specific type of multiple errors used in internally for choices.
 * 
 * Defers merging errors until actually needed.
 */
var ChoiceError := function \position, pErr, qErr =self-> {
    self.position = position;
    self._pErr = pErr;
    self._qErr = qErr;
};
ChoiceError.prototype = new MultipleError();
ChoiceError.prototype.constructor = MultipleError;
ChoiceError.prototype.name = 'ChoiceError';

Object.defineProperty(ChoiceError.prototype, 'errors', {
    get: \ =self->
        [self._pErr].concat(self._qErr.errors)
});

/**
 * @constructor
 * @implements {ParseError}
 * 
 * @param position Position of error.
 */
UnknownError := function \position =self-> {
    self.position = position;
};
UnknownError.prototype = new ParseError();
UnknownError.prototype.constructor = UnknownError;
UnknownError.prototype.name = 'UnknownError';

Object.defineProperty(UnknownError.prototype, 'errorMessage', {
    value: "unknown error"
});

/**
 * @constructor
 * @implements {ParseError}
 * 
 * @param position Position of error.
 * @param unexpected Found value.
 */
UnexpectError := function \position unexpected =self-> {
    self.position = position;
    self.unexpected = unexpected;
};
UnexpectError.prototype = new ParseError();
UnexpectError.prototype.constructor = UnexpectError;
UnexpectError.prototype.name = 'UnexpectError';

Object.defineProperty(UnexpectError.prototype, 'errorMessage', {
    get: \ =self->
        "unexpected: " + self.unexpected
});

/**
 * @constructor
 * @implements {ParseError}
 * 
 * @param position Position of error.
 * @oaram expected Expected value.
 * @param [found] Found value.
 */
ExpectError := function \position expected found =self-> {
    self.position = position;
    self.expected = expected;
    self.found = found;
};
ExpectError.prototype = new ParseError();
ExpectError.prototype.constructor = ExpectError;
ExpectError.prototype.name = "ExpectError";

Object.defineProperty(ExpectError.prototype, 'errorMessage', {
    get: \ =self->
        "expected: " + self.expected + ?self.found
            :" found: " + self.found
            :""
});

/* Parser definition
 ******************************************************************************/
/**
 * Create a raw parser.
 * 
 * This class also has all the FL implementations defined on it.
 */
Parser := function \n =self-> {
    self.run = n;
};

unparser := \p state m cok cerr eok eerr ->
    new Tail(p.run, state, m, cok, cerr, eok, eerr);

/**
 * Attaches a name for debugging.
 * 
 * This modifies the parser function object and should only be used when
 * defining parsers in a library and never during parsing itself.
 * 
 * @param {string} name Human readable display name to give the Parser. Used for
 *     identifying a parser for debugging.
 * @param p Parser.
 */
label := \name p ->
    ?p.run.hasOwnProperty 'displayName'
       :label(
           name,
           new Parser (unparser @ p))
       
       :new Parser(Object.defineProperty(p.run, 'displayName', {
            value: name,
            writable: false
        }));

/**
 * Creates a placeholder for a parser that is resolved later.
 * 
 * This is useful for circular references when wrapping the entire thing in `rec`
 * would be annoying.
 * 
 * @param def Function that, when called, resolves a parser. Will be called once.
 */
late := \def -> {
    var value;
    return new Parser\state m cok cerr eok eerr -> {
        value = value || def();
        return unparser(value, state, m, cok, cerr, eok, eerr);
    };
};

/**
 * Creates a self referential parser.
 * 
 * In this example, the self reference to 'bs' evaluates to undefined:
 * 
 *    var bs = either(character('b'), bs);
 *    
 *    // this is really
 *    var bs = either(parse.character('b'), undefined);
 * 
 * Using rec, we fix this.
 * 
 *     var bs = rec\self ->
 *         either(character('b'), self);
 * 
 * @param def Factory function that is passed a reference to the parser being
 *     defined and returns the parser.
 */
rec := \def -> {
    var value = def <| late\-> { return value; };
    return value;
};

/* Parsers
 ******************************************************************************/
// Base Parsers
////////////////////////////////////////
/**
 * Succeed with `x`.
 * 
 * Consumes no input.
 */
always := of := Parser.of := Parser.prototype.of := \x ->
    new Parser\state m _ _ eok _ -> eok(x, state, m);

/**
 * Fail with `x`.
 * 
 * Consumes no input.
 */
never := \x ->
    new Parser\state m _ _ _ eerr -> eerr(x, state, m);

/**
 * Parse `p`, passing the results to function `f` which returns a
 * parser that continues the computation.
 * 
 * @param p Parser.
 * @param f Function that maps `p` result to next parser.
 */
bind := chain := Parser.chain := \p f ->
    new Parser\state m cok cerr eok eerr ->
        unparser(p,
            state,
            m,
            \x state m -> unparser(f x, state, m, cok, cerr, cok, cerr),
            cerr,
            \x state m -> unparser(f x, state, m, cok, cerr, eok, eerr),
            eerr);

Parser.prototype.chain := \f =self->
    chain(self, f);

// Fantasy Land
////////////////////////////////////////
Parser.prototype.map := \f =self->
    bind(self, f \> always);

map := Parser.map := \f p ->
     p.map(f);

// Applicative
ap := Parser.ap := \f m ->
    bind(f, \f -> m.map f);

Parser.prototype.ap := \m2 =self->
    ap(self, m2);

// State Interaction Parsers
////////////////////////////////////////
/**
 * Modify the current parser state.
 * 
 * @param f Function mapping old state to new state.
 */
modifyParserState := \f ->
    new Parser\state m _ _ eok _ ->
        let newState = f(state) in
            eok(newState, newState, m);

/**
 * Return the current parser state.
 */
getParserState := label@'Get Parser State' <|
    modifyParserState(identity);

/**
 * Set the current parser state.
 * 
 * @param s New state.
 */
setParserState := modifyParserState <\ constant;

/**
 * Extracts information from the state.
 * 
 * @param {function(Object): *} f Function that extracts information from a 
 *     given state object.
 */
extract := \f ->
    new Parser\state m _ _ eok _ -> eok(f state, state, m);

/**
 * Parser that modifies the current user state using function 'f'.
 * 
 *  @param {function(ParserState): *} f Function that transforms that current user state.
 */
modifyState := \f ->
    modifyParserState \ s ->
        s.setUserState(f(s.userState));

/**
 * Parser that returns the current user state.
 */
getState := label@'Get State' <|
    extract (.userState);

/**
 * Parser that sets current user parser state to 's'.
 */
setState := modifyState <\ constant;

/**
 * Get the current position.
 */
getPosition := label@'Get Position' <|
    extract (.position);

/**
 * Set the position.
 */
setPosition := \position ->
    modifyParserState \ s -> s.setPosition(position);

/**
 * Get the current input.
 */
getInput := label@'Get Input' <|
    extract (.input);

/**
 * Set the input.
 */
setInput = \input ->
    modifyParserState \ s -> s.setInput(input);

// Attempt
////////////////////////////////////////
var _binary := \p1 p2 f ->
    bind(p1, \v1 ->
        bind(p2, \v2 -> f(v1, v2)));

var _fail := \e ->
    bind(getPosition, e \> never);

/**
 * Fails with an error and consumes no input.
 * 
 * @param {String} [msg] Error message.
 */
fail := \msg ->
    let e = ?msg : ParseError : UnknownError in
        _fail\pos -> new e(pos, msg);

/**
 * Attempt parser `p`, but upon failure never consume any input.
 */
attempt := \p ->
    new Parser\state m cok cerr eok eerr -> let
        peerr = \x s m -> eerr(x, s, Memoer.popWindow(m))
    in
        unparser(p,
            state,
            Memoer.pushWindow(m, state.position),
            \x s m -> cok(x, s, Memoer.popWindow(m)),
            peerr,
            \x s m -> eok(x, s, Memoer.popWindow(m)),
            peerr);

/**
 * Run `p`, restore old state, and return result from `p`.
 * 
 * This behavior is the same as parsec's `lookahead`.
 */
look := \p ->
    _binary(
        getParserState,
        p,
        \state x ->
            next(
                setParserState state,
                always x));

/**
 * Run `p` and restore old input and position.
 * 
 * This preserves the `userState` from `p`.
 */
lookahead := \p ->
    _binary(
        getInput,
        getPosition,
        \input pos ->
            bind(p, \x ->
                sequence(
                    setPosition pos,
                    setInput input,
                    always x)));

// Combinitorial Parsers
////////////////////////////////////////
/**
 * Parse `p`, then `q`. Return value from `q`.
 */
next := \p q ->
    bind(p, constant q);

/**
 * Consume a sequence of 1 or more parsers, returning result from last.
 * 
 * This may partially fail if any parser fails in the sequence. Wrap in attempt
 * to prevent partial failures.
 * 
 * @param s Stream of parsers
 */
sequences := reduceRight@(flip next);

/**
 * Consume a finite sequence of 1 or more parsers, returning result from last.
 * 
 * This may partially fail if any parser fails in the sequence. Wrap in attempt
 * to prevent partial failures.
 * 
 * @param arr Array of parsers to consume.
 */
sequencea := stream.from \> sequences;

/**
 * Same as `sequencea` but gets parsers from arguments instead of array.
 */
sequence := args \>> sequencea;

// Choice Parsers
////////////////////////////////////////
empty := Parser.empty := Parser.prototype.empty := fail();

var _either = \e ->
    \p q ->
        new Parser\state#{position} m cok cerr eok eerr -> let 
            peerr = \errFromP, _, mFromP -> let
                qeerr = \errFromQ, _, mFromQ ->
                    eerr(e(position, errFromP, errFromQ), state, mFromQ)
            in
                unparser(q, state, mFromP, cok, cerr, eok, qeerr)
        in
            unparser(p, state, m, cok, cerr, eok, peerr);

/**
 * Run `p` or `q`. If `p` succeeds, return its value. Else, try
 * to parse `q`.
 */
either := concat := Parser.concat = _either(\pos pErr qErr -> new MultipleError(pos, [pErr, qErr]));

Parser.prototype.concat := \p =self ->
    concat(self, p);

/**
 * Parser that attempts a number of parsers in order, returning the value of
 * the first one that succeeds.
 * 
 * @param s Stream of parsers.
 */
choices := foldr@(
    flip(_either(\pos pErr qErr -> new ChoiceError(pos, pErr, qErr))),
    never(new MultipleError(null, [])));

/**
 * @see choices
 * 
 * @param arr Array of parsers to attempt.
 */
choicea := stream.from \> choices;

/**
 * Same as choice but gets parsers from arguments.
 */
choice := args \>> choicea;

/**
 * Consume `p` or return `x`.
 * 
 * @param [x] Default value.
 * @param p Parser.
 */
optional := \x p ->
    ?p
        :either(p, always x)
        :either(x, always null);

/**
 * Run `p` and if it fails without consuming input, produce an ExpectError with `expect`.
 * 
 * @param expect Expected value.
 * @param p Parser.
 */
expected := \expect p ->
    new Parser\state m cok cerr eok eerr ->
        unparser(p, state, m,
            cok,
            cerr,
            eok,
            \x state m -> eerr(new ExpectError(state.position, expect), state, m));

/**
 * Run `p`, swapping result success and never consuming any input.
 * 
 * @param p Parser.
 */
not := \p -> 
    attempt either(
        bind(attempt p, \x ->
            _fail\pos -> new UnexpectError(pos, x)),
        always null);

// Iterative Parsers
////////////////////////////////////////
var liftM2 := \f p1 p2 ->
    bind(p1, \x ->
        map(\y -> f(x, y), p2));

/**
 * Map the stream result of a parser to a regular array.
 */
eager := map @ stream.toArray;

/**
 * Same behavior as `bind` but calls apply on `f` using stream results of `p`.
 */
binds := \p f ->
    bind(eager p, \x ->
        f.apply(undefined, x));

/**
 * Cons result of a parser onto the stream result of an iterative another.
 */
cons := liftM2 @ stream.cons;

/**
 * Joins the results of two iterative Parsers
 */
append := liftM2 @ stream.append;

/**
 * Consume a sequence of parsers, returning the results as a stream.
 * 
 * @param s Stream of parsers to consume.
 */
enumerations := foldr@(flip cons, always NIL);

/**
 * @see enumerations
 * 
 * @param arr Array of parsers to consume.
 */
enumerationa := stream.from \> enumerations;

/**
 * Same as `enumerationa` but gets parsers from arguments.
 */
enumeration := args \>> enumerationa;

/**
 * Consume `p` zero or more times.
 * 
 * Will throw an error when `p` succeeds without consuming. As this is an error
 * with the parser itself, this event breaks out of parsing.
 */
many = let
    _optionalValueParser = optional @ NIL,

    manyError = throwConstant(
        new ParserError("Many parser applied to parser that accepts an empty string"))
in
    \p -> let
        safeP = new Parser\state m cok cerr eok eerr ->
            unparser(p, state, m, cok, cerr, manyError, eerr)
        in
            rec\self ->
                _optionalValueParser(cons(safeP, self));

/**
 * Consume `p` one or more times.
 */
many1 := \p -> cons(p, many p);

/**
 * Consume `p` until `end` matches.
 */
manyTill := \p end ->
    rec\self ->
        either(
            attempt(lookahead(end)).map(\_ -> NIL),
            optional(cons(p, self), NIL)
        );

/* Memo Parsers
 ******************************************************************************/
/**
 * Use memoized result for `p`, or parse `p` and store result in memo table.
 *
 * Memoization is based on equal states, not equal inputs.
 */
memo = \p ->
    new Parser\state#{position} m cok cerr eok eerr -> {
        var key := { id: p, state: state};
        var entry := Memoer.lookup(m, position, key);
        
        if (entry) with [type, x, s] = entry in {
            switch (type) {
            case 'cok':     return cok(x, s, m);
            case 'ceerr':   return cerr(x, s, m);
            case 'eok':     return eok(x, s, m);
            case 'eerr':    return eerr(x, s, m);
            }
        }
        
        return unparser(p, state, m,
            \x pstate pm ->
                cok(x, pstate,
                    Memoer.update(pm, position, key, ['cok', x, pstate])),
            \x pstate pm ->
                cerr(x, pstate,
                    Memoer.update(pm, position, key, ['cerr', x, pstate])),
            \x pstate pm ->
                eok(x, pstate,
                    Memoer.update(pm, position, key, ['eok', x, pstate])),
            \x pstate pm ->
                eerr(x, pstate,
                    Memoer.update(pm, position, key, ['eerr', x, pstate])));
    };

// Token Parsers
////////////////////////////////////////
/**
 * Consumes a single item from the head of the input if consume is
 * true. Fails to consume input if consume is false or input is empty.
 * 
 * @param consume Function that tests if a character should be consumed.
 * @param [errMsg] Optional function that returns the error when consume fails.
 *    Passed the state position and tested token.
 */
token = let
    defaultErr = \pos tok ->
        new UnexpectError(pos, ?tok === null : "end of input" : tok)
in
    \consume onErr -> let
        errorHandler = (onErr || defaultErr)
    in
        new Parser\s m cok cerr eok eerr ->
            ?s.isEmpty()
                :eerr(errorHandler(s.position, null), s, m)
            
            :let tok = s.first() in
                ?consume tok
                    :let pcok = \x s m -> cok(x, s, Memoer.prune(m, s.position)) in
                        unparser(s.next(tok), s, m, pcok, cerr, pcok, cerr)
                
                :eerr(errorHandler(s.position, tok), s, m);

/**
 * Consume any token.
 */
anyToken := label@'Any Token' <|
    token(constant true);

/**
 * Matches end of input.
 */
eof := label@'EOF' <|
    not anyToken;

/* Running
 ******************************************************************************/
/**
 * Execute parser `p`, correctly extracting results.
 */
exec := unparser \>> trampoline;

/**
 * Run parser `p` with a given state and continuations.
 * 
 * Returns either the result of one of the continuations or the abrupt result
 * of the parser.
 * 
 * @param p Parser.
 * @param state Parser state.
 * @param ok Success continuation.
 * @param err Failure continuation.
 */
parseState := \p state ok err ->
    exec(
        p,
        state,
        Memoer.empty,
        ok,
        err,
        ok,
        err);

/**
 * Run parser `p` against a given stream.
 * 
 * @param p Parser
 * @param s Stream.
 * @param ud User data.
 * 
 * @see parseState
 */
parseStream := \p s ud ok err ->
    parseState(
        p,
        new ParserState(s, Position.initial, ud),
        ok,
        err);

/**
 * Run parser 'p' against an input string.
 * 
 * @param p Parser.
 * @param input Array-like object of characters to run the parser against.
 * @param ud User data.
 * 
 * @see parseStream.
 */
parse := \p input ud ok err ->
    parseStream(
        p,
        stream.from input,
        ud,
        ok,
        err);

/**
 * Run parser `p`. Return success results and throw error results.
 * 
 * @param p Parser.
 * @param state Parser state.
 */
runState := let
    ok = identity,
    err = \x -> { throw x; }
in
    \p state ->
        parseState(
            p,
            state,
            ok,
            err);

/**
 * Run parser 'p' against an input stream.
 * 
 * Supplies own state object.
 * 
 * @param p Parser.
 * @param s Nu style stream supporting first and rest.
 * @param [ud] User data.
 */
runStream := \p s ud ->
    runState(
        p,
        new ParserState(s, Position.initial, ud));

/**
 * Run parser 'p' against an input string.
 * 
 * @param p Parser.
 * @param input Array-like object of characters to run the parser against.
 * @param [ud] User data.
 */
run := \p input ud ->
    runStream(
        p,
        stream.from input,
        ud);

/**
 * Tests parser 'p' with a given state.
 * 
 * @param p Parser.
 * @param state State to run parser against.
 *
 * @return Did the parser successfully run?
 */
testState := let
    ok = constant true,
    err = constant false
in
    \p state ->
        parseState(
            p,
            state,
            ok,
            err);

 /**
 * Test parser 'p' against stream 's'.
 * 
 * @param p Parser to run.
 * @param s Nu style stream supporting first and rest.
 * @param [ud] User data.
 * 
 * @see testState
 */
testStream := \p s ud ->
    testState(
        p,
        new ParserState(s, Position.initial, ud));

/**
 * Test parser 'p' against 'input'.
 * 
 * @param p Parser to run.
 * @param input Array-like object of characters to run the parser against.
 * @param [ud] User data.
 *
 * @see testStream
 */
test := \p input ud ->
    testStream(
        p,
        stream.from input,
        ud);

}
