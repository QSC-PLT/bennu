/**
 * @fileOverview Combinatorial Parsers for JavaScript.
 * 
 * Unless otherwise noted, parses do not support backtracking by default.
 */
define(['nu/stream'],
function(stream) {
"use strict";

/* Prototypes
 ******************************************************************************/
var map = Function.prototype.call.bind(Array.prototype.map);
var reduceRight = Function.prototype.call.bind(Array.prototype.reduceRight);

/* Helpers
 ******************************************************************************/
var curry = (f /*, ...*/) -> f.bind.apply(f, arguments);

var identity = x -> x;

var constant = x -> () -> x;

var throwConstant = err -> () -> { throw err; };

var eq = (x, y) -> x === y;

var uniqueParserId = () -> Math.random();

/* Continuation
 ******************************************************************************/
var cont = (f, args) -> {
    var c = [f, args];
    c._next = true;
    return c;
};

var trampoline = f -> {
    var value = f;
    while (value && value._next) {
        value = value[0].apply(undefined, value[1]);
    }
    return value;
};

/* Memoization
 ******************************************************************************/
/**
 * A match cell for memoization.
 * 
 * Stores a value for a given state.
 * Can be asked to perform a lookup for a state, in which it may return 'val' 
 * or delegate to another match cell.
 * 
 */
var Memoer = function(id, state, val, delegate) {
    this.id = id;
    this.state = state;
    this.val = val;
    this.delegate = delegate;
};

/**
 * Lookup a value, if any, stored in a match cell for 'state'.
 */
Memoer.lookup = function(cell, id, state) {
    for (var m = cell; m; m = m.delegate) {
        if (m.id === id && m.state.eq(state)) {
            return m.val;
        }
    }
    return null;
};

/**
 * Create a new match cell storing 'val' for 'state' and including, delegating,
 * some cell 'm'.
 */
Memoer.update = (m, id, state, val) -> new Memoer(id, state, val, m);

/* Records
 ******************************************************************************/
// Position
////////////////////////////////////////
/**
 * Position in the input.
 * 
 * Simply tracks the index in the input.
 */
var Position = function(i) {
    this.index = i;
};

/**
 * Initial position in a stream.
 */
Position.initial = new Position(0);

/**
 * Advanced the position based on a consumed character.
 * 
 * @param tok Token that was consumed.
 * 
 * @returns Position after 'tok'.
 */
Position.prototype.increment = tok ->
    new Position(this.index + 1);

Position.prototype.toString = () ->
    '' + this.index;

/**
 * Compares two positions.
 * 
 * @returns Number less than, equal to, or greater than zero if this position is
 *   less than, equal to, or greater than 'pos'.
 */
Position.prototype.compare = pos ->
    this.index - pos.index;

// ParserState
////////////////////////////////////////
/**
 * Object used to track a Parser's state.
 * 
 * @param input Input to the parser.
 * @param position Current position of head of input.
 * @param [userState] Object that users can thread through parsers.
 */
var ParserState = function(input, position, userState) {
    this.input = input;
    this.position = position;
    this.userState = userState;
};

/**
 * Get next state object for a given consumed token.
 * 
 * @param tok Token consumed.
 * 
 * @returns New input state for next item in input.
 */
ParserState.prototype.next = tok ->
    (this._next ||
        (this._next = new ParserState(stream.rest(this.input), this.position.increment(tok), this.userState)));

/**
 * Are two states equal?
 * 
 * States are equal if their position's are equal.
 */
ParserState.prototype.eq = state ->
    (this.position.compare(state.position) === 0);

/**
 * Create a new state with input.
 * 
 * @param input Input.
 * 
 * @returns New input state with position.
 */
ParserState.prototype.setInput = input ->
    new ParserState(input, this.position, this.userState);

/**
 * Create a new state with position.
 * 
 * @param pos New position.
 * 
 * @returns New input state with position.
 */
ParserState.prototype.setPosition = position ->
    new ParserState(this.input, position, this.userState);

/**
 * Create a new state with userState.
 * 
 * @param userState New user state.
 * 
 * @returns New input state with position.
 */
ParserState.prototype.setUserState = userState ->
    new ParserState(this.input, this.position, userState);

/* Errors
 ******************************************************************************/
/**
 * @constructor
 * @implements {Error}
 * 
 * Base Error for an error with the parsers themselves.
 */
var ParserError = function(msg) {
    this.message = msg;
};
ParserError.prototype = new Error();
ParserError.prototype.constructor = ParserError;
ParserError.prototype.name = 'ParserError';

/**
 * @constructor
 * @implements {Error}
 * 
 * Base Error for an error encountered during parsing.
 * 
 * @param position Position of error.
 * @param [msg] Error message.
 */
var ParseError = function(position, msg) {
    this.position = position;
    this._msg = msg;
};
ParseError.prototype = new Error();
ParseError.prototype.constructor = ParseError;
ParseError.prototype.name = 'ParseError';

Object.defineProperties(ParseError.prototype, {
    'message': {
        'configurable': true,
        'get': () ->
            "At position:" + this.position + " " + this.errorMessage
    },
    'errorMessage': {
        'configurable': true,
        'get': () ->
            (this._msg === undefined ? "" : this._msg)
    }
});

/**
 * @constructor
 * @implements {ParseError}
 * Merges zero or more ParseErrors into a single ParseError.
 * 
 * @params position Position of errors.
 * @params [errors] Array like object containing zero or more ParseErrors.
 */
var MultipleError = function(position, errors) {
    ParseError.call(this, position);
    this.errors = (errors || []);
};
MultipleError.prototype = new ParseError();
MultipleError.prototype.constructor = MultipleError;
MultipleError.prototype.name = 'MultipleError';

Object.defineProperty(MultipleError.prototype, 'errorMessage', {
    'get': () ->
        "[" + map(this.errors, x -> x.message).join(", ") + "]"
});

/**
 * @constructor
 * @implements {MultipleError}
 * Specific type of multiple errors used in internally for choices.
 * 
 * Defers merging errors until actually needed.
 */
var ChoiceError = function(position, pErr, qErr) {
    ParseError.call(this, position);
    this._pErr = pErr;
    this._qErr = qErr;
};
ChoiceError.prototype = new MultipleError();
ChoiceError.prototype.constructor = MultipleError;
ChoiceError.prototype.name = 'ChoiceError';

Object.defineProperty(ChoiceError.prototype, 'errors', {
    'get': () ->
        [this._pErr].concat(this._qErr.errors)
});

/**
 * @constructor
 * @implements {ParseError}
 * 
 * @param position Position of error.
 */
var UnknownError = function(position) {
    ParseError.call(this, position);
};
UnknownError.prototype = new ParseError();
UnknownError.prototype.constructor = UnknownError;
UnknownError.prototype.name = 'UnknownError';

Object.defineProperty(UnknownError.prototype, 'errorMessage', {
    'value': "unknown error"
});

/**
 * @constructor
 * @implements {ParseError}
 * 
 * @param position Position of error.
 * @param unexpected Found value.
 */
var UnexpectError = function(position, unexpected) {
    ParseError.call(this, position);
    this.unexpected = unexpected;
};
UnexpectError.prototype = new ParseError();
UnexpectError.prototype.constructor = UnexpectError;
UnexpectError.prototype.name = 'UnexpectError';

Object.defineProperty(UnexpectError.prototype, 'errorMessage', {
    'get': () ->
        "Unexpected:" + this.unexpected
});

/**
 * @constructor
 * @implements {ParseError}
 * 
 * @param position Position of error.
 * @oaram expected Expected value.
 * @param [found] Found value.
 */
var ExpectError = function(position, expected, found) {
    ParseError.call(this, position);
    this.expected = expected;
    this.found = found;
};
ExpectError.prototype = new ParseError();
ExpectError.prototype.constructor = ExpectError;
ExpectError.prototype.name = "ExpectError";

Object.defineProperty(ExpectError.prototype, 'errorMessage', {
    'get': () ->
        "Expected:" + this.expected + (this.found ?
            " Found:" + this.found :
            "")
});

/* Rec
 ******************************************************************************/
/**
 * Creates a parser using a factory function to allow self references.
 * 
 * For example, using a traditional definition the self reference to 'bs'
 * evaluates to undefined:
 * 
 *    var bs = parse.either(parse.character('b'), bs) => parse.either(parse.character('b'), undefined)
 * 
 * Using rec, we fix this.
 * 
 *     var bs = rec(function(self) {
 *         return parse.either(parse.character('b'), self);
 *     });
 * 
 * @param def Factory function that is passed a reference to the parser being
 *     defined and returns the parser.
 * 
 * @return A parser.
 */
var rec = def -> {
    var value;
    return (value = def((/*...*/) -> value.apply(this, arguments)));
};

/* Parser definition
 ******************************************************************************/
/**
 * Create a named parser.
 * 
 * Attaches a name for debugging and a unique id for memoization.
 * 
 * If parser is already named, wraps the parser in a new named parser.
 * 
 * @param {string} name Human readable display name to give the Parser. Used for
 *     identifying a parser for debugging.
 * @param impl Implementation of the parser itself, not the parser's constructor.
 *
 * @return 
 */
var Parser = (name, impl) ->
    (impl.hasOwnProperty('parserId') ? 
        Parser(name, (/*...*/) -> impl.apply(this, arguments)) :
        Object.defineProperties(impl, {
            'displayName': {
                'value': name,
                'writable': false
            },
            'parserId': {
                'value': uniqueParserId(),
                'writable': false
            }
        }));

/**
 * Create a recursively defined parser.
 * 
 * @param body The body of the parser.
 */
var RecParser = (name, body) -> Parser(name, rec(body));

/* Parsers
 ******************************************************************************/
// Base Parsers
////////////////////////////////////////
/**
 * Parser that always succeeds with a given value and consumes no input.
 * 
 * @param x Value to succeed with.
 */
var always = x ->
    function ALWAYS_PARSER(state, m, cok, cerr, eok /*, _*/) {
        return eok(x, state, m);
    };

/**
 * Parser that always fails and consumes no input.
 * 
 * @param x Value to fail with.
 */
var never = x ->
    function NEVER_PARSER(state, m, cok, cerr, eok, eerr) {
        return eerr(x, state, m);
    };

/**
 * Parser that parses 'p', passing the results to function 'f' which returns a
 * parser 'q' that continues the computation.
 * 
 * @param p Parser to run, passing results to f.
 * @param f Function called with result from 'p' and returns parser 'q'.
 * 
 * @return Value from 'q' parser.
 */
var bind = (p, f) ->
    function BIND_PARSER(state, m, cok, cerr, eok, eerr) {
        var pcok = (x, state, m) -> cont(f(x, state, m), [state, m, cok, cerr, cok, cerr]),
            peok = (x, state, m) -> cont(f(x, state, m), [state, m, cok, cerr, eok, eerr]);
        return cont(p, [state, m, pcok, cerr, peok, eerr]);
    };

/**
 * Parser that matches end of input. If end of input, succeeds with null.
 */
var eof = () ->
    function EOF_PARSER(state, m, cok, cerr, eok, eerr) {
        return (stream.isEmpty(state.input) ?
            eok(stream.end, state, m) :
            eerr(new ExpectError(state.position, "end of input",  stream.first(state.input)), state, m));
    };

// State Interaction Parsers
////////////////////////////////////////
/**
 * Parser that extracts information from the Parser's current state.
 * 
 * @param {function(Object): *} f Function that extracts information from a 
 *     given state object.
 */
var extract = f ->
    function EXTRACT_PARSER(state, m, cok, cerr, eok /*, _*/) {
        return eok(f(state), state, m);
    };

/**
 * Parser that returns the current state.
 */
var getParserState = constant(extract(identity));

/**
 * Parser that modifies the current parser state using function 'f'.
 * 
 *  @param {function(ParserState): *} f Function that transforms that current state.
 */
var modifyParserState = f ->
    function MODIFY_PARSER_STATE(state, m, cok, cerr, eok /*, _*/) {
        var newState = f(state);
        return eok(newState, newState, m);
    };

/**
 * Parser that sets current parser state to 's'.
 * 
 * @param s New parser state.
 */
var setParserState = s ->
    modifyParserState(constant(s));

/**
 * Parser that returns the current users state.
 */
var getState = constant(extract(s -> s.userState));

/**
 * Parser that modifies the current user state using function 'f'.
 * 
 *  @param {function(ParserState): *} f Function that transforms that current user state.
 */
var modifyState = f ->
    function MODIFY_STATE(state, m, cok, cerr, eok /*, _*/) {
        var newState = state.setUserState(f(state.userState));
        return eok(newState, newState, m);
    };

/**
 * Parser that sets current user parser state to 's'.
 * 
 * @param s New user parser state.
 */
var setState = s ->
    modifyState(constant(s));
    
/**
 * Parser that gets the current position.
 */
var getPosition = constant(extract(s -> s.position));

/**
 * Parser that sets the current position
 */
var setPosition = position ->
    modifyParserState(s -> s.setPosition(position));

/**
  *Parser that gets the current input.
 */
var getInput = constant(extract(s -> s.input));

/**
 * Parser that sets the current input.
 */
var setInput = input ->
    modifyState(s -> s.setInput(input));

// 
////////////////////////////////////////
/**
 * Parser that always fails with an error and consumes no input.
 * 
 * @param {String} [msg] message for error.
 */
var fail = msg ->
    let e = (msg ? ParseError : UnknownError) in
        bind(getPosition(), pos -> never(new e(pos, msg)));

/**
 * Parser that attempts to parse p. Upon failure, never consumes any input.
 */
var attempt = p ->
    function ATTEMPT_PARSER(state, m, cok, cerr, eok, eerr) {
        return cont(p, [state, m, cok, eerr, eok, eerr]);
    };

/**
 * Parser that consumes no input but returns what was parsed.
 */
var lookahead = p ->
    function LOOKAHEAD_PARSER(state, m, cok, cerr, eok, eerr) {
        var ok = (item, _, m) -> eok(item, state, m);
        return cont(p, [state, m, ok, cerr, eok, eerr]);
    };

// Combinitorial Parsers
////////////////////////////////////////
/**
 * Parser that parses 'p', then 'q'. Return the 'q' value.
 */
var next = (p, q) ->
    bind(p, constant(q));

var _either = e ->
    (p, q) ->
        function EITHER_PARSER(state, m, cok, cerr, eok, eerr) {
            var pos = state.position;
            var peerr = function(errFromP, _, mFromP) {
                var qeerr = (errFromQ, _, mFromQ) ->
                    eerr(e(pos, errFromP, errFromQ), state, mFromQ);
                return cont(q, [state, mFromP, cok, cerr, eok, qeerr]);
            };
            return cont(p, [state, m, cok, cerr, eok, peerr]);
        };

/**
 * Parser that attempts p or q. If p succeeds, returns its value. Else, tries
 * to parse q.
 */
var either = _either((pos, pErr, qErr) -> new MultipleError(pos, [pErr, qErr]));

/**
 * Parser that attempts a variable number of parsers in order and returns
 * the value of the first one that succeeds.
 * 
 * Throws a ParserError if called with no arguments.
 */
var choice = (function(){
    var either = _either((pos, pErr, qErr) -> new ChoiceError(pos, pErr, qErr));
        
    var reducer = (p, c) -> either(c, p);
    
    var end = (state, m, cok, cerr, eok, eerr) ->
        eerr(new MultipleError(state.position, []), state, m);
    
    return (/*...*/) -> {
        if (!arguments.length) {
            throw new ParserError("choice called with no arguments");
        }
        return reduceRight(arguments, reducer, end);
    };
}());

/**
 * Consume 'p' either zero or one time.
 * 
 * @param x Default value to return.
 * @param p Parser to consume zero or one times.
 * 
 * @return Result of 'p' or default value.
 */
var optional = (x, p) ->
    either(p, always(x));

/**
 * Parser that parses 'p' but if 'p' fails without consuming input, produces
 * an ExpectError with 'msg'.
 * 
 * @param expect Expected value. 
 * @param p Parser to attempt.
 */
var expected = (expect, p) ->
    function EXPECTED_PARSER(state, m, cok, cerr, eok, eerr) {
        return p(state, m, cok, cerr, eok, (x, state, m) -> eerr(new ExpectError(state.position, expect), state, m));
    };

// Iterative Parsers
////////////////////////////////////////
var _end = always(stream.end);

var _optionalValueParser = curry(optional, stream.end);

var _joinParser = joiner ->
    (p1, p2) ->
        bind(p1, v1 ->
            bind(p2, v2 ->
                always(joiner(v1, v2))));

/**
 * Parser that takes stream results from 'p' and turns eagerly turns them into
 * an regular array.
 */
var eager =
    let toArray = x -> always(stream.toArray(x)) in
        p -> bind(p, toArray);
        
/**
 * Same as bind but calls apply on 'f' using stream results of 'p'.
 */
var binds = (p, f) ->
    bind(eager(p), x ->
        f.apply(undefined, x));
/**
 * Parser that cons the value result of 'valueParser' onto the stream result
 * of 'streamParser'.
 * 
 * @param valueParser Parser that returns a value.
 * @param streamParser Parser that returns a stream.

 * @return Stream with value from 'valueParser' consed on.
 */
var cons = _joinParser(stream.cons);

/**
 * Parser that joins the results of two iterative Parsers
 */
var append = _joinParser(stream.append);

/**
 * Consume a finite sequence of parsers, returning the results as a stream.
 */
var sequence = 
    let reducer = (p, q) -> cons(q, p) in
        (/*...*/) -> reduceRight(arguments, reducer, _end);

/**
 * Consume 'p' zero or more times.
 * 
 * Will throw an error when 'p' succeeds without consuming. As this is an error
 * with the parser itself, this event breaks out of parsing.
 * 
 * @param p Parser to consume zero or more times.
 */
var many =
    let
        manyError = throwConstant(
            new ParserError("Many parser applied to a parser that accepts an empty string"))
    in
        function MANY_PARSER(p) {
            var safeP = (state, m, cok, cerr, eok, eerr) ->
                cont(p, [state, m, cok, cerr, manyError, eerr]);
            return rec(self -> _optionalValueParser(cons(safeP, self)));
        };

/**
 * Consume 'p' 1 or more times.
 * 
 * @param p Parser to consume one or more times.
 */
var many1 = p ->
    cons(p, many(p));

// Token Parsers
////////////////////////////////////////
/**
 * Parser that consumes a single item from the head of the input if consume is
 * true. Fails to consume input if consume is false or input is empty.
 * 
 * @param {function(string): boolean} consume Function that tests if a
 *     character should be consumed.
 * @param {function(object): Error} [errMsg] Optional function that returns
 *    the error when consume fails. Passed the state position and tested token.
 */
var token = (function(){
    var defaultErr = (pos, tok) ->
        new UnexpectError(pos, (tok === null ? "end of input" : tok));
    
    return (consume, onErr) -> {
        onErr = (onErr || defaultErr);
        return function TOKEN_PARSER(state, m, cok, cerr, eok, eerr) {
            var pos = state.position,
                input = state.input;
            if (!input) {
                return eerr(onErr(pos, null), state, m);
            } else {
                var tok = stream.first(input);
                return (consume(tok) ?
                    cok(tok, state.next(tok), m) :
                    eerr(onErr(pos, tok), state, m));
            }
        };
    };
}());

/**
 * Parser that consumes any token.
 */
var anyToken = constant(token(constant(true)));

var _character = (pred, c) ->
    token(curry(pred, c));

/**
 * Parser that consumes a character based on a predicate.
 * 
 * @param c Object to test against.
 * @param {function(Object, Object): boolean} [pred] Predicate function that
 *    compares two values. Returns if the parser should consume the character.
 */
var character = (c, pred) ->
    _character((pred || eq), c);

/**
 * Parser that consumes a sequence of characters based on a predicate.
 * 
 * @param s Sequence of objects to test against.
 * @param {function(Object, Object): boolean} [pred] Predicate function called on
 *    each character of sequence that compares two values. Returns if the parser
 *    should consume the character.
 **/
var string = 
    let reducer = (p, c) -> next(c, p) in
        (s, pred) ->
            map(s, curry(_character, (pred || eq)))
                .reduceRight(reducer, always(s));

/* Memo Parsers
 ******************************************************************************/
/**
 * Parse 'p' and continue with old memo table.
 */
var backtrack = p ->
    (state, m, cok, cerr, eok, eerr) ->
        cont(p, [state, m,
             (x, state /*, _*/) -> cok(x, state, m),
             (x, state /*, _*/) -> cerr(x, state, m),
             (x, state /*, _*/) -> eok(x, state, m), 
             (x, state /*, _*/) -> eerr(x, state, m)]);

/**
 * Uses memoized result for 'p' or parse 'p' and store result in memo table.
 * 
 * Memoization is based on equal states, not equal inputs.
 */
var memo = function(p) {
    var id = (p.parserId || uniqueParserId());
    return function(state, m, cok, cerr, eok, eerr) {
        var entry = Memoer.lookup(m, id, state);
        if (entry) {
            return cont(entry, [state, m, cok, cerr, eok, eerr]);
        }
        
        var pcok = (x, pstate, pm) ->
            cok(x, pstate,
                Memoer.update(pm, id, state, (_, m, cok /*, cerr, eok, eerr*/) -> cok(x, pstate, m)));
        
        var pcerr = (x, pstate, pm) ->
            cerr(x, pstate,
                Memoer.update(pm, id, state, (_, m, cok, cerr /*, eok, eerr*/) -> cerr(x, pstate, m)));
        
        var peok = (x, pstate, pm) ->
            eok(x, pstate,
                Memoer.update(pm, id, state, (_, m, cok, cerr, eok /*, eerr*/) -> eok(x, pstate, m)));
        
        var peerr = (x, pstate, pm) ->
            eerr(x, pstate,
                Memoer.update(m, id, state, (_, m, cok, cerr, eok, eerr) -> eerr(x, pstate, pm)));
        
        return cont(p, [state, m, pcok, pcerr, peok, peerr]);
    };
};

/* Running
 ******************************************************************************/
/**
 * Execute a given parser 'p', correctly extracting results.
 */
var exec = (p, state, m, cok, cerr, eok, eerr) ->
    trampoline(p(state, m, cok, cerr, eok, eerr))();

var _perform = (p, state, ok, err) ->
    exec(p, state, null, ok, err, ok, err);

/**
 * Perform parser 'p' with state, returning result from callback 'ok' when 
 * successful and from 'err' on error.
 */
var perform = (p, state, ok, err) ->
    _perform(p, state, x -> () -> ok(x), x -> () -> err(x));

/**
 * Run a given parser with a given state.
 * 
 * @param p Parser to run.
 * @param state State to run parser against.
 * 
 * @return Result from the parser.
 */
var runState = (p, state) ->
    _perform(p, state, constant, throwConstant);

/**
 * Run parser 'p' against an input stream.
 * 
 * Supplies own state object.
 * 
 * @param p Parser to run.
 * @param s Nu style stream supporting first and rest.
 * @param [ud] User data.
 * 
 * @return Result from the parser.
 */
var runStream = (p, s, ud) ->
    runState(p, new ParserState(s, Position.initial, ud));

/**
 * Run parser 'p' against an input string.
 * 
 * @param p Parser to run.
 * @param input Array-like object of characters to run the parser against.
 * @param [ud] User data.

 * @return Result from the parser.
 */
var run = (p, input, ud) ->
    runStream(p, stream.from(input), ud);

/**
 * Run parser 'p' zero or more times to produce a lazy stream of results.
 * 
 * Similar in operation to the 'many' parser, but lazy is not a
 * combinatorial parser.
 * 
 * Result may be an infinite stream.
 * 
 * @param p Parser to run zero or more times.
 * @param state State to run parser against.
 * 
 * @return Lazy stream of results.
 */
var runManyState = function(p, state) {
    var manyP = _optionalValueParser(
        bind(p, (x, state, m) ->
            always(stream.memoStream(x, curry(runState, manyP, state, m)))));
    return runState(manyP, state);
};

/**
 * Run parser 'p' zero or more times to produce a lazy stream or results.
 * 
 * Supplies own state.
 * 
 * @param p Parser to run.
 * @param s Nu style stream supporting first and rest.
 * @param [ud] User data.
 *
 * @see runManyState
 */
var runManyStream = (p, s, ud) ->
    runManyState(p, new ParserState(s, Position.initial, ud));

/**
 * Run parser 'p' zero or more times against an input string to produce a lazy
 * stream or results.
 * 
 * @param p Parser to run.
 * @param input Array-like object of characters to run the parser against.
 * @param [ud] User data.
 *
 * @see runManyStream
 */
var runMany = (p, input, ud) ->
    runManyStream(p, stream.from(input), ud);

/**
 * Tests parser 'p' with a given state.
 * 
 * @param p Parser to run.
 * @param state State to run parser against.
 *
 * @return Did the parser successfully run?
 */
var testState = (p, state) ->
    _perform(p, state, constant(constant(true)), constant(constant(false)));

 /**
 * Tests parser 'p' against a stream.
 * 
 * Supplies own state.
 * 
 * @param p Parser to run.
 * @param s Nu style stream supporting first and rest.
 * @param [ud] User data.
 * 
 * @see testState
 */
var testStream = (p, s, ud) ->
    testState(p, new ParserState(s, Position.initial, ud));

/**
 * Tests parser 'p' against an input string.
 * 
 * @param p Parser to run.
 * @param input Array-like object of characters to run the parser against.
 * @param [ud] User data.
 *
 * @see testStream
 */
var test = (p, input, ud) ->
    testStream(p, stream.from(input), ud);

/* Export
 ******************************************************************************/
return {
// Errors
    'ParserError': ParserError,
    
    'ParseError': ParseError,
    'MultipleError': MultipleError,
    'UnknownError': UnknownError,
    'UnexpectError': UnexpectError,
    'ExpectError': ExpectError,
    
// Objects
    'ParserState': ParserState,
    'Position': Position,
    
// Rec
    'rec': rec,
    
// Parser Definition
    'Parser': Parser,
    'RecParser': RecParser,
    
// Parsers
    'always': always,
    'never': never,
    'bind': bind,
    'eof': eof,
    
    'extract': extract,
    'getParserState': getParserState,
    'setParserState': setParserState,
    'modifyParserState': modifyParserState,
    
    'getState': getState,
    'setState': setState,
    'modifyState': modifyState,
    
    'getInput': getInput,
    'setInput': setInput,
    
    'getPosition': getPosition,
    'setPosition': setPosition,
    
    'fail': fail,
    'attempt': attempt,
    'lookahead': lookahead,
    
    'next': next,
    'either': either,
    'choice': choice,
    'optional': optional,
    'expected': expected,
    
    'eager': eager,
    'binds': binds,
    'cons': cons,
    'append': append,
    'sequence': sequence,
    'many': many,
    'many1': many1,

    'token': token,
    'anyToken': anyToken,
    
    'character': character,
    'string': string,
    
    'backtrack': backtrack,
    'memo': memo,
    
// Running
    'exec': exec,
    
    'perform': perform,
    
    'runState': runState,
    'runStream': runStream,
    'run': run,
    
    'runManyState': runManyState,
    'runManyStream': runManyStream,
    'runMany': runMany,
    
    'testState': testState,
    'testStream': testStream,
    'test': test
};
});