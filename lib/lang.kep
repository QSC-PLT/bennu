/**
 * @fileOverview Combinatory parsers for ordering parses in a language.
 */
package (
    times
    atMostTimes
    betweenTimes
    then
    between
    sepBy1
    sepBy
    sepEndBy1
    sepEndBy
    endBy1
    endBy
    chainl1
    chainl
    chainr1
    chainr)
with
    import 'nu-stream::stream' {NIL},
    import 'nu-stream::gen' {repeat},

    import './parse' {
        append
        always
        bind
        cons
        either
        enumerations
        late
        many
        many1
        next
        optional
        ParserError
        rec}
in {

/* Parsers
 ******************************************************************************/
var _end = always NIL;

var _optionalValueParser = optional@NIL;

/**
 * Consume p exactly 'n' times.
 * 
 * @param {Number} n Number of times to consume p.
 * @param p Parser.
 */
times = repeat \>> enumerations;

/**
 * Consume `p` at most 'n' times.
 * 
 * @param {Number} n Max number of times to consume `p`.
 * @param p Parser.
 */
atMostTimes = \n p ->
    ?n <= 0
        :_end
    :_optionalValueParser(
        cons(
            p,
            late \-> atMostTimes(n - 1, p)));

/**
 * Consume 'p' between 'min' and 'max' times.
 * 
 * @param {Number} min Minimum number of times to consume 'p'.
 * @param {Number} max Maximum number of times to consume 'p'.
 * @param p Parser.
 */
betweenTimes = \min max p -> {
    if (max < min)
        throw new ParserError("between max < min");
    return append(
        times(min, p),
        atMostTimes(max - min, p));
};

/**
 * Parse 'p' then 'q', returning result from 'p'.
 */
then = \p q ->
    bind(p, \x ->
        next(q, always x));

/**
 * Consume 'p' between 'open' and 'close', returning 'p' results.
 * 
 * @param open Parser to consume first, discarding results.
 * @param close Parser to consume last, discarding results.
 * @param p Parser to consume between 'open' and 'close'.
 */
between = \open, close, p ->
    next(open, then(p, close));

/**
 * Consume 'p' separated by 'sep' one or more times.
 * 
 * If sep succeeds but p fails, does not backtrack.
 */
sepBy1 = \sep p -> 
    cons(p, many <| next(sep, p));

/**
 * Parser that consumes 'p' separated by 'sep' zero or more times.
 */
sepBy = sepBy1 \>> _optionalValueParser;

/**
 * Parser that consumes 'p' one or more times separated and optional ended by 'sep'.
 */
sepEndBy1 = \sep p ->
    rec\self ->
        cons(
            p,
            _optionalValueParser <| next(
                sep,
                _optionalValueParser self));

/**
 * Parser that consumes 'p' zero or more times separated and optional ended by 'sep'.
 */
sepEndBy = \sep p ->
    either(
        sepEndBy1(sep, p),
        next(optional(null, sep), _end));

/**
 * Parser that consumes 'p' one or more times separated by 'sep' and ended by 'sep'.
 */
endBy1 = \sep p ->
    many1 <| then(p, sep);

/**
 * Parser that consumes 'p' one or more times separated by 'sep' and ended by 'sep'.
 */
endBy = \sep p ->
    many <| then(p, sep);

/**
 * Parser that consumes 'p' one or more times separated by 'op' and returns 
 * result of left associative application of resulting function from 'op' to 'p'
 * values.
 */
chainl1 = \op p ->
    bind(p, function chain \x ->
        optional(x, bind(op, \f ->
            bind(p, \y -> chain <| f(x, y)))));

/**
 * Parser that consumes 'p' one or more times separated by 'op' and returns 
 * result of left associative application of resulting function from 'op' to 'p'
 * values.
 */
chainl = \op x p ->
    optional(x, chainl1(op, p));

/**
 * Parser that consumes 'p' one or more times separated by 'op' and returns 
 * result of right associative application of resulting function from 'op' to 'p'
 * values.
 */
chainr1 = \op p ->
    rec\self ->
        bind(p, \x ->
            optional(x, bind(op, \f ->
                bind(self, \y -> always <| f(x, y)))));

/**
 * Parser that consumes 'p' zero or more times separated by 'op' and returns 
 * result of right associative application of resulting function from 'op' to 'p'
 * values.
 */
chainr = \op x p ->
    optional(x, chainr1(op, p));

}