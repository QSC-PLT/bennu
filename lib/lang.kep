/**
 * @fileOverview Combinatory parsers for ordering parses in a language.
 */
package (
    times
    atMostTimes
    betweenTimes
    then
    between
    sepBy1
    sepBy
    sepEndBy1
    sepEndBy
    endBy1
    endBy
    chainl1
    chainl
    chainr1
    chainr)
with
    import 'nu-stream::stream' {NIL},
    import 'nu-stream::gen' {repeat},

    import './parse' {
        append
        always
        bind
        cons
        either
        enumerations
        late
        many
        many1
        next
        optional
        ParserError
        rec}
in {

/* Parsers
 ******************************************************************************/
var _end = always NIL;

var _optionalValueParser = optional @ NIL;

/**
 * Consume `p` exactly `n` times.
 */
times = repeat \>> enumerations;

/**
 * Consume `p` at most `n` times.
 */
atMostTimes = \n p ->
    ?n <= 0
        :_end
    :_optionalValueParser(
        cons(
            p,
            late \-> { return atMostTimes(n - 1, p); }));

/**
 * Consume `p` between `min` and `max` times.
 */
betweenTimes = \min max p -> {
    if (max < min)
        throw new ParserError("between max < min");
    return append(
        times(min, p),
        atMostTimes(max - min, p));
};

/**
 * Parse `p` then `q`, returning result from `p`.
 */
then = \p q ->
    bind(p, \x ->
        next(q, always x));

/**
 * Consume `p` between `open` and `close`, returning `p` results.
 */
between = \open close p ->
    next(open, then(p, close));

/**
 * Consume `p` separated by `sep` one or more times.
 * 
 * When `sep` succeeds but `p` fails, does not backtrack.
 */
sepBy1 = \sep p -> 
    cons(p, many next(sep, p));

/**
 * Consumes `p` separated by `sep` zero or more times.
 */
sepBy = sepBy1 \>> _optionalValueParser;

/**
 * Consume `p` one or more times, separated and optional ended by `sep`.
 */
sepEndBy1 = \sep p ->
    rec\self ->
        cons(
            p,
            _optionalValueParser <| next(
                sep,
                _optionalValueParser self));

/**
 * Consume `p` zero or more times, separated and optional ended by `sep`.
 */
sepEndBy = \sep p ->
    either(
        sepEndBy1(sep, p),
        next(optional sep, _end));

/**
 * Consume `p` one or more times separated by `sep` and ended by `sep`.
 */
endBy1 = \sep p ->
    many1 then(p, sep);

/**
 * Consume `p` zero or more times separated by `sep` and ended by `sep`.
 */
endBy = \sep p ->
    many then(p, sep);

/**
 * Consume `p` one or more times separated by `op`.
 * 
 * Returns left associative application of functions from `op` to `p` values.
 * 
 * @param op Operator parser.
 * @param p Value parser.
 */
chainl1 = \op p ->
    bind(p, function chain \x ->
        optional(x, bind(op, \f ->
            bind(p, \y -> chain <| f(x, y)))));

/**
 * Consume `p` zero or more times separated by `op`.
 * 
 * @see chail1
 * 
 * @param op Operator parser.
 * @param x Value to return when zero `p` consumed.
 * @param p Value parser.
 */
chainl = \op x p ->
    optional(x, chainl1(op, p));

/**
 * Consume `p` one or more times separated by `op`.
 * 
 * Returns right associative application of functions from `op` to `p` values.
 * 
 * @param op Operator parser.
 * @param p Value parser.
 */
chainr1 = \op p ->
    rec\self ->
        bind(p, \x ->
            optional(x, bind(op, \f ->
                self.map(\y -> f(x, y)))));

/**
 * Consume `p` zero or more times separated by `op`.
 * 
 * @see chainr1
 * 
 * @param op Operator parser.
 * @param x Value to return when zero `p` consumed.
 * @param p Value parser.
 */
chainr = \op x p ->
    optional(x, chainr1(op, p));

}