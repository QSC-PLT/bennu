/**
 * @fileOverview Parsers for use specifically with text.
 */
static define;
define(['parse/parse'],
function(parse) {
"use strict";

var reduce = Function.prototype.call.bind(Array.prototype.reduce);
var reduceRight = Function.prototype.call.bind(Array.prototype.reduceRight);

var expectError = \msg ->
    \pos, tok ->
        new parse.ExpectError(pos, msg, (tok === null ? "end of input" : tok));

/* Errors
 ******************************************************************************/
/**
 * @constructor
 * @implements {ExpectError}
 * 
 * @param position Position of error.
 * @oaram expected Expected value.
 * @param [found] Found value.
 */
var StringError = function(position, string, index, expected, found) {
    parse.ExpectError.call(this, position, expected, found);
    this.string = string;
    this.index = index;
};
StringError.prototype = new parse.ExpectError;
StringError.prototype.constructor = StringError;

Object.defineProperty(StringError.prototype, 'errorMessage', {
    'get': \() ->
        "In string:'" + this.string + "' at index:" + this.index +
        ", Expected:" + this.expected +
        " Found:" + (this.found ? this.found :"end of input")
});

/* Parsers
 ******************************************************************************/
var _character = let
    pred = \l -> let x = l.valueOf() in \r -> (x === r.valueOf())
in
    \c, err -> parse.token(pred(c), err);

/**
 * Parser that consumes a given character. 
 * 
 * Attempts to unbox primitive object boxes.
 * 
 * @param c The char to consume.
 */
var character = \c -> _character(c, expectError(c));

/**
 * Parser that consumes a given string.
 * 
 * This parses all or nothing. Either it matches the string or it fails at the
 * starting location.
 * 
 * @param {String} s String to consume.
 */
var string = let
    reducer = \p, c, i, s ->
       parse.next(
           _character(c,
               \pos, tok -> new StringError(pos, s, i, c, tok)),
           p)
in
    \s -> parse.attempt(reduceRight(s, reducer, parse.always(s)));

/**
 * Parser that matches any string from an array of words using a trie.
 * 
 * In cases with many overlapping strings, this is more efficient than `parse.choice`
 * as it avoids backtracking.
 * 
 * Matching is greedy and longest possible string is preferred. If no word matches,
 * nothing is consumed.
 * 
 * @param words 
 */
var trie = let
    wordReduce = \parent, l -> {
        parent[l] = (parent[l] || {});
        return parent[l];
    },
    wordsReduce = \trie, word -> {
        var node = reduce(word, wordReduce, trie);
        node[''] = null;
        return trie;
    },
    makeTrie = \words -> reduce(words, wordsReduce, {}),
    _trie = \trie, prefix ->
        parse.choice.apply(undefined, Object.keys(trie).sort().reverse().map(\n ->
            (n.length === 0 ?
                parse.always(prefix) :
                parse.attempt(parse.next(
                    character(n),
                    _trie(trie[n], prefix + n))))))
in
    \words -> parse.attempt(_trie(makeTrie(words), ''));

/**
 * Parser that consumes input that matches a regular expression.
 * 
 * This is a character level operation. The regular expression is run against
 * characters, not the stream.
 * 
 * @param pattern Regular expression to test characters against.
 * @param {String} expected Human readable message of the expected value.
 */
var match = \pattern, expected ->
    parse.token(RegExp.prototype.test.bind(pattern), expectError(expected));

/**
 * Parser that consumes any character.
 */
var anyChar = parse.Parser('Any Character',
    match(`^.$`, "any character"));

/**
 * Parser that consumes any letter character.
 */
var letter = parse.Parser('Any Letter',
    match(`^[a-z]$`i, "any letter character"));

/**
 * Parser that consumes any space character.
 */
var space = parse.Parser('Any Whitespace',
    match(`^\s$`i, "any space character"));

/**
 * Parser that consumes any number character.
 */
var digit = parse.Parser('Any Digit',
    match(`^[0-9]$`i, "any digit character"));

/* Export
 ******************************************************************************/
return {
// Parsers
    'character': character,
    'string': string,
    'trie': trie,
    
    'match': match,
    'anyChar': anyChar,
    'letter': letter,
    'space': space,
    'digit': digit
};

});