/**
 * @fileOverview Parsers for use specifically with text.
 */
package (
    character
    oneOf
    noneOf
    string
    trie
    match
    anyChar
    letter
    space
    digit)
with
    import './parse' {
        always
        attempt
        bind
        either
        expected
        ExpectError
        next
        label
        token}
in {

var join = Function.prototype.call.bind(Array.prototype.join);
var map = Function.prototype.call.bind(Array.prototype.map);
var reduce = Function.prototype.call.bind(Array.prototype.reduce);
var reduceRight = Function.prototype.call.bind(Array.prototype.reduceRight);

var expectError := \msg ->
    \pos tok ->
        new ExpectError(pos, msg, ?tok === null :"end of input" :tok);

/* Errors
 ******************************************************************************/
/**
 * @constructor
 * @implements {ExpectError}
 * 
 * @param position Position of error.
 * @oaram expected Expected value.
 * @param [found] Found value.
 */
var StringError = function \position, string, index, expected, found =self-> {
    ExpectError.call(self, position, expected, found);
    self.string = string;
    self.index = index;
};
StringError.prototype = new ExpectError();
StringError.prototype.constructor = StringError;

Object.defineProperty(StringError.prototype, 'errorMessage', {
    'get': \() =self->
        "In string: '" + self.string + "' at index: " + self.index +
        ", Expected: " + self.expected +
        " Found: " + (?self.found :self.found :"end of input")
});

/* Parsers
 ******************************************************************************/
var unbox := (+, '');

var has := \a x ->
    a.indexOf(unbox x) >= 0;

var _character := let
    pred = \l -> let x = unbox l in \r -> (x === unbox r)
in
    \c err -> token(pred(c), err);

/**
 * Parser that consumes `c`. 
 * 
 * Attempts to unbox objects.
 */
character = \c -> _character(c, expectError(c));

/**
 * Parser that consumes any of a set of character `chars`. 
 * 
 * Behaves the same as a choice of single characters but more efficient.
 * 
 * Attempts to unbox primitive object boxes.
 */
oneOf = \chars -> let
    chars = map(chars, unbox)
in
    token(
        has@chars,
        expectError(join(chars, ' or ')));

/**
 * Parser that consumes any character not in `chars`
 * 
 * Attempts to unbox primitive object boxes.
 */
noneOf = \chars -> let
    chars = map(chars, unbox)
in
    token(
        (!) <\ has@chars,
        expectError('none of:' + join(chars, ' or ')));

/**
 * Consumes string `s`.
 * 
 * This parses all or nothing. Either it matches the string or it fails at the
 * starting location.
 * 
 * @param {String} s String, or array like of characters, to consume.
 */
string = let
    reducer = \p c i s ->
       next(
           _character(c,
               \pos tok -> new StringError(pos, s, i, c, tok)),
           p)
in
    \s -> attempt reduceRight(s, reducer, always(unbox s));

/**
 * Parser that matches any string from an array of words using a trie.
 * 
 * In cases with many overlapping strings, this is more efficient than `parse.choice`
 * as it avoids backtracking.
 * 
 * Matching is greedy and longest possible string is preferred. If no word matches,
 * nothing is consumed.
 * 
 * @param words 
 */
trie = let
    wordReduce = \parent, l -> {
        parent.(l) = (parent.(l) || {});
        return parent.(l);
    },
    
    wordsReduce = \trie, word -> {
        var node = reduce(word, wordReduce, trie);
        node.('') = word;
        return trie;
    },
    
    makeTrie = \words -> reduce(words, wordsReduce, {}),
    
    _trie := \trie -> let
        keys = Object.keys(trie),
        
        paths = reduce(keys, \p, c -> {
            if (c.length)
                p.(c) = _trie(trie.(c));
            return p;
        }, {}),
        
        select = attempt bind(oneOf keys, (., paths))
    in
        ?trie.hasOwnProperty('')
            :either(
                select,
                always trie.(''))
            :select
in
    \words -> attempt _trie(makeTrie words, '');

/**
 * Parser that consumes input that matches a regular expression.
 * 
 * This is a character level operation. The regular expression is run against
 * characters, not the stream.
 * 
 * @param pattern Regular expression to test characters against.
 * @param {String} expected Human readable message of the expected value.
 */
match = \pattern expected ->
    token(
        RegExp.prototype.test.bind(pattern),
        expectError(expected));

/**
 * Parser that consumes any character.
 */
anyChar = label@'Any Character' <|
    match(`^.$`, "any character");

/**
 * Parser that consumes any letter character.
 */
letter = label@'Any Letter' <|
    match(`^[a-z]$`i, "any letter character");

/**
 * Parser that consumes any space character.
 */
space = label@'Any Whitespace' <|
    match(`^\s$`i, "any space character");

/**
 * Parser that consumes any number character.
 */
digit = label@'Any Digit' <|
    match(`^[0-9]$`i, "any digit character");

}