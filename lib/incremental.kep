/**
 * @fileOverview Parsers for use specifically with text.
 */
package (
// Operations
    provide,
    provideString,
    finish,
    
// Creation
    parseState,
    parse)
with
    import 'parse/parse' {always, attempt, bind, choicea, getParserState, exec, ExpectError, Memoer, next, Parser, ParserState, Position, token},
    import 'nu/stream' stream{'end': NIL, isEmpty, first, rest}
in {

var trampoline = \f -> {
    var value = f;
    while (value && value._next)
        value = value[0].apply(undefined, value[1]);
    return value;
};

var Request = function(chunk, state, k) {
    this.chunk = chunk;
    this.state = state;
    this.k = k;
};

var Resumable = function(done, chunk, state, k, chunks) {
    this.done = done;
    this.chunk = chunk;
    this.state = state;
    this.k = k;
    this.chunks = chunks;
};

Resumable.prototype.addChunk = \c ->
    new Resumable(
        this.done,
        this.chunk + 1,
        this.state,
        this.k,
        this.chunks.concat(c));

// ResumableState
////////////////////////////////////////
var ResumableState = function(chunk, state) {
    this.chunk = chunk;
    this.state = state;
};

Object.defineProperties(ResumableState, {
    'input': {
        'get': \() -> this.state.input
    },
    'position': {
        'get': \() -> this.state.position
    },
    'userState': {
        'get': \() -> this.state.userState
    }
});


ResumableState.prototype.eq = \other ->
    other && other.chunk === this.chunk && other.state.eq(other.state);

ResumableState.prototype.isEmpty = \() ->
    this.state.isEmpty();

ResumableState.prototype.first = \() ->
    this.state.first();

ResumableState.prototype.next = \x -> {
    if (!this._next) {
        var chunk = this.chunk;
        var self = this;
        
        if (isEmpty(rest(this.state.input))) {
            return bind(next(self.state.next(x), getParserState), \s ->
                \_, m, cok ->
                    new Request(
                        chunk + 1,
                        s,
                        \i -> cok(x, new ResumableState(chunk + 1, s.setInput(i)), m)));
        }
        
        this._next = next(
            this.state.next(x),
            bind(getParserState, \innerState ->
                let state = new ResumableState(chunk, innerState) in
                    \_, m, cok ->
                        cok(x, state, m)));
    }
    return this._next;
};

ResumableState.prototype.setInput = \input ->
    new ResumableState(
        this.chunk,
        this.state.setInput(input));

ResumableState.prototype.setPosition = \position ->
    new ResumableState(
        this.chunk,
        this.state.setPosition(position));

ResumableState.prototype.setUserState = \userState ->
    new ResumableState(
        this.chunk,
        this.state.setUserState(userState));

/* Operations
 ******************************************************************************/
/**
 * 
 */
provide = \r, c -> {
    if (r.done)
        return r;
    
    var r2 = r.addChunk(c);
    var result = trampoline(r2.k(r2.state.setInput(c)));
    while (result instanceof Request) {
        if (result.chunk >= r2.chunks.length)
            return new Resumable(
                false,
                r2.chunk,
                result.state,
                \x -> result.k(x.input),
                r2.chunks);
        result = trampoline(result.k(r2.chunks[result.chunk]));
    }
    return result;
};

provideString = \r, s ->
    provide(r, stream.from(s));

finish = \r ->
    !r.done ?
        finish(trampoline(r.k(r.state))) :
        r.k(r.state);

/* Creation
 ******************************************************************************/
/*var exec = \p, s, m, cok, cerr, eok, eerr ->
    exec(p, s, Memoer.empty, ok, err, ok, err),
*/
        
/** 
 * Run a given parser with a given state.
 * 
 * @param p Parser to run.
 * @param state ResumableState to run parser against.
 * 
 * @return Result from the parser.
 */
parseState = \p, state ->
    new Resumable(
        false,
        0,
        new ResumableState(0, state),
        \s -> let
            ok = \x, s -> new Resumable(true, -1, s, \ -> x),
            err =\x, s -> new Resumable(true, -1, s, \ -> { throw x; })
        in
            exec(p, s, Memoer.empty, ok, err, ok, err),
        []);

/**
 * Run parser 'p' against an input string.
 * 
 * @param p Parser to run.
 * @param input Array-like object of characters to run the parser against.
 * @param [ud] User data.

 * @return Result from the parser.
 */
parse = \p, ud ->
    parseState(
        p,
        new ParserState(
            NIL,
            Position.initial,
            ud));

}