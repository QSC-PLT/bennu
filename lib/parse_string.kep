/**
 * @fileOverview Parsers for use specifically with strings.
 */
static define;
define(['parse/parse',
        'nu/stream'],
function(parse,
        stream) {
"use strict";

/* Prototypes
 ******************************************************************************/
var reduce = Function.prototype.call.bind(Array.prototype.reduce);

var regExpTest = RegExp.prototype.test;

/* Helpers
 ******************************************************************************/
var stringEq = \a, b -> (a.valueOf() === b.valueOf());

var expectError = \msg ->
    \pos, tok ->
        new parse.ExpectError(pos, msg, (tok === null ? "end of input": tok));

/* Parsers
 ******************************************************************************/
/**
 * Parser that consumes a given character. 
 * 
 * Unboxes string Objects
 * 
 * @param c The char to consume.
 */
var character = \c ->
    parse.token(stringEq.bind(undefined, c), expectError(c));

/**
 * Parser that consumes a given string.
 * 
 * Unlike 'parse.string', this parses all or nothing. Either it matches the string
 * or it fails at the starting location.
 * 
 * @param {String} s String to consume.
 */
var string = let
    impl = \original, remaining, found, pos ->
        (remaining.length === 0 ?
            parse.always(original) :
            parse.next(
               parse.token(
                   stringEq.bind(undefined, remaining[0]),
                   \(_, tok) -> new parse.ExpectError(pos, original, (tok === null ? found : found + tok))),
               impl(original, remaining.slice(1), found + remaining[0], pos)))
    in
        \s ->
            parse.bind(
                parse.getPosition(),
                \pos -> parse.attempt(impl(s, s, "", pos)));

/**
 * Parser that builds a parse trie from an array of strings.
 */
var trie =
    let
        wordReduce = \parent, l -> { parent[l] = (parent[l] || {}); return parent[l]; },
        wordsReduce = \trie, word -> {
            var node = reduce(word, wordReduce, trie);
            node[''] = null;
            return trie;
        },
        makeTrie = \words -> reduce(words, wordsReduce, {}),
        _trie = \trie, prefix ->
            parse.choice.apply(undefined, Object.keys(trie).map(\n -> {
                return (n.length === 0 ?
                    parse.always(prefix) :
                    parse.next(
                        character(n),
                        _trie(trie[n], prefix + n)));
            }))
    in
        \nodes -> parse.attempt(_trie(makeTrie(nodes), ''));

/**
 * Parser that consumes any character.
 */
var anyChar = parse.Parser('Any Character',
    parse.token(regExpTest.bind(`^.$`), expectError("any character")));

/**
 * Parser that consumes any letter character.
 */
var letter = parse.Parser('Any Letter',
    parse.token(regExpTest.bind(`^[a-z]$`i), expectError("any letter character")));

/**
 * Parser that consumes any space character.
 */
var space = parse.Parser('Any Whitespace',
    parse.token(regExpTest.bind(`^\s$`i), expectError("any space character")));

/**
 * Parser that consumes any number character.
 */
var digit = parse.Parser('Any Digit',
    parse.token(regExpTest.bind(`^[0-9]$`i), expectError("any digit character")));

/* Export
 ******************************************************************************/
return {
// Parsers
    'character': character,
    'string': string,
    'trie': trie,
    
    'anyChar': anyChar,
    'letter': letter,
    'space': space,
    'digit': digit
};

});